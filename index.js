/**
 * Integra√ß√£o Groq - API ToLearn
 * Aplica√ß√£o para integra√ß√£o com a API da Groq para gera√ß√£o de conte√∫do por IA
 * 
 * Este arquivo cont√©m toda a configura√ß√£o do servidor Express e as rotas da API
 */

// Importa√ß√µes das bibliotecas necess√°rias
import express from "express";  // Framework web para Node.js
import Groq from "groq-sdk";    // SDK oficial da Groq para integra√ß√£o com a API
import 'dotenv/config';         // Carrega vari√°veis de ambiente do arquivo .env
import swaggerJsDoc from "swagger-jsdoc";     // Gera especifica√ß√£o OpenAPI a partir de coment√°rios JSDoc
import swaggerUi from "swagger-ui-express";   // Interface visual para documenta√ß√£o Swagger
import cors from "cors";         // Middleware para habilitar CORS na API
import PDFDocument from "pdfkit"; // Biblioteca para gera√ß√£o de PDFs

// Inicializa√ß√£o e configura√ß√£o do aplicativo Express
const app = express();
app.use(express.json());                // Middleware para processar JSON no corpo das requisi√ß√µes
app.use(express.static("public"));      // Serve arquivos est√°ticos da pasta 'public'
app.use(cors());                        // Habilita CORS para todas as rotas

// Configura√ß√µes e vari√°veis de ambiente
const PORT = process.env.PORT || 3001;  // Porta do servidor (padr√£o: 3001)
const groq = new Groq({ apiKey: process.env.GROQ_API_KEY }); // Inicializa o cliente Groq com a chave API
const DEFAULT_SYSTEM_PROMPT = process.env.DEFAULT_SYSTEM_PROMPT || "N√£o responda nada fora do contexto de ci√™ncia da computa√ß√£o e programa√ß√£o."; // Prompt padr√£o do sistema
const DEFAULT_REPORT_PROMPT = `
Voc√™ √© um especialista em educa√ß√£o e an√°lise de desempenho acad√™mico. 
Utilize os dados a seguir para gerar um relat√≥rio humanizado e pedag√≥gico a respeito do desempenho do aluno em um Estudo Dirigido Obrigat√≥rio (EDO), de acordo com a seguinte estrutura:

1. An√°lise Geral do Desempenho
2. Pontos Fortes
3. Dificuldades Encontradas
4. Recomenda√ß√µes ao Professor
5. Conclus√£o

Regras de sa√≠da esperada:
* Use linguagem pedag√≥gica, humanizada e objetiva.
* A an√°lise deve reconhecer acertos, destacar potenciais e explicar com empatia as dificuldades.
* A se√ß√£o de recomenda√ß√µes deve ser √∫til para o professor saber como apoiar o aluno nos pr√≥ximos desafios.
* A conclus√£o deve refor√ßar o est√°gio atual do aluno e seu potencial de progresso.

Formato final: texto corrido estruturado nos 5 blocos mencionados, sem t√≥picos num√©ricos no corpo, mas respeitando os t√≠tulos. 
O conte√∫do deve ser exclusivo para este aluno, considerando apenas a tentativa com a maior nota.
    
Inicie o relat√≥rio com:
üß† RELAT√ìRIO DETALHADO POR IA ‚Äî [Nome do Aluno]
`; // Prompt padr√£o para relat√≥rios

// Vari√°vel para armazenar o prompt do sistema atual em mem√≥ria
let currentSystemPrompt = DEFAULT_SYSTEM_PROMPT;
let currentReportPrompt = DEFAULT_REPORT_PROMPT;

// Rota para obter o prompt de sistema atual
app.get("/api/config/system-prompt", (req, res) => {
  res.json({ prompt: currentSystemPrompt });
});

// Rota para atualizar o prompt de sistema
app.put("/api/config/system-prompt", (req, res) => {
  const { prompt } = req.body;
  
  if (!prompt || prompt.trim() === "") {
    return res.status(400).json({ error: "Prompt de sistema n√£o fornecido!" });
  }
  
  // Atualiza a vari√°vel em mem√≥ria
  currentSystemPrompt = prompt.trim();
  console.log("Prompt do sistema atualizado para:", currentSystemPrompt);
  
  res.json({ 
    success: true, 
    prompt: currentSystemPrompt,
    message: "Prompt de sistema atualizado com sucesso!" 
  });
});

// Rota para obter o prompt de relat√≥rio atual
app.get("/api/config/report-prompt", (req, res) => {
  res.json({ prompt: currentReportPrompt });
});

// Rota para atualizar o prompt de relat√≥rio
app.put("/api/config/report-prompt", (req, res) => {
  const { prompt } = req.body;
  
  if (!prompt || prompt.trim() === "") {
    return res.status(400).json({ error: "Prompt de relat√≥rio n√£o fornecido!" });
  }
  
  // Atualiza a vari√°vel em mem√≥ria
  currentReportPrompt = prompt.trim();
  console.log("Prompt de relat√≥rio atualizado para:", currentReportPrompt);
  
  res.json({ 
    success: true, 
    prompt: currentReportPrompt,
    message: "Prompt de relat√≥rio atualizado com sucesso!" 
  });
});

// Configura√ß√£o do Swagger para documenta√ß√£o da API
const swaggerOptions = {
  definition: {
    openapi: "3.0.0",
    info: {
      title: "API ToLearn - Groq Integration",
      version: "1.0.0",
      description: "API de integra√ß√£o com Groq para gera√ß√£o de conte√∫do inteligente",
      contact: {
        name: "ToLearn Team"
      }
    },
    servers: [
      {
        url: `http://localhost:${PORT}`
      }
    ]
  },
  apis: ["./index.js"]  // Arquivos onde os coment√°rios JSDoc da API est√£o localizados
};

// Inicializa o Swagger e configura a rota para acessar a documenta√ß√£o
const swaggerDocs = swaggerJsDoc(swaggerOptions);
app.use("/api-docs", swaggerUi.serve, swaggerUi.setup(swaggerDocs));

/**
 * @swagger
 * /api/config/system-prompt:
 *   get:
 *     summary: Obt√©m o prompt de sistema atual
 *     tags: [Configura√ß√£o]
 *     responses:
 *       200:
 *         description: Prompt de sistema retornado com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 prompt:
 *                   type: string
 *   put:
 *     summary: Atualiza o prompt de sistema
 *     tags: [Configura√ß√£o]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - prompt
 *             properties:
 *               prompt:
 *                 type: string
 *                 description: Novo prompt de sistema para contextualizar o modelo
 *     responses:
 *       200:
 *         description: Prompt de sistema atualizado com sucesso
 *       400:
 *         description: Prompt n√£o fornecido
 */

/**
 * @swagger
 * /api/config/report-prompt:
 *   get:
 *     summary: Obt√©m o prompt de relat√≥rio atual
 *     tags: [Configura√ß√£o]
 *     responses:
 *       200:
 *         description: Prompt de relat√≥rio retornado com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 prompt:
 *                   type: string
 *   put:
 *     summary: Atualiza o prompt de relat√≥rio
 *     tags: [Configura√ß√£o]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - prompt
 *             properties:
 *               prompt:
 *                 type: string
 *                 description: Novo prompt de relat√≥rio para contextualizar o modelo
 *     responses:
 *       200:
 *         description: Prompt de relat√≥rio atualizado com sucesso
 *       400:
 *         description: Prompt n√£o fornecido
 */

/**
 * @swagger
 * /api/chat:
 *   post:
 *     summary: Envia uma mensagem para o modelo Groq e retorna uma resposta
 *     tags: [Chat]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - message
 *             properties:
 *               message:
 *                 type: string
 *                 description: Mensagem a ser enviada para o modelo
 *     responses:
 *       200:
 *         description: Resposta gerada com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 response:
 *                   type: string
 *       400:
 *         description: Mensagem n√£o fornecida
 *       500:
 *         description: Erro ao consultar a API do Groq
 */
/**
 * Fun√ß√£o utilit√°ria para interagir com a API da Groq
 * 
 * @param {string} message - Mensagem do usu√°rio a ser enviada para o modelo
 * @param {string} systemPrompt - Prompt do sistema para contextualizar o modelo (instru√ß√µes)
 * @returns {Promise} - Promessa que resolve com a resposta da API da Groq
 */
function getGroqChatCompletion(message, systemPrompt = null) {
  // Usa o prompt fornecido ou o prompt atual do sistema (que pode ter sido alterado via API)
  const finalSystemPrompt = systemPrompt || currentSystemPrompt;
  return groq.chat.completions.create({
    messages: [
      {
        role: "system",
        content: finalSystemPrompt,  // Instru√ß√µes para o modelo seguir
      },
      {
        role: "user",
        content: message,       // Mensagem do usu√°rio
      },
    ],
    model: "llama-3.3-70b-versatile",  // Modelo da Groq a ser utilizado
  });
}

/**
 * Rota para o endpoint do chat com IA
 * Recebe uma mensagem do usu√°rio e retorna uma resposta gerada pela IA da Groq
 */
app.post("/api/chat", async (req, res) => {
  const { message, systemPrompt } = req.body;  // Extrai a mensagem e o prompt opcional do corpo da requisi√ß√£o

  // Valida√ß√£o da mensagem
  if (!message) {
    return res.status(400).json({ error: "Mensagem n√£o fornecida!" });
  }

  try {
    // Envia a mensagem para a API da Groq e aguarda a resposta (usando o prompt do sistema fornecido, se houver)
    const responseGroq = await getGroqChatCompletion(message, systemPrompt);

    // Registra a resposta no console para monitoramento
    console.log("Resposta da API Groq:", responseGroq.choices[0]?.message.content);

    // Retorna a resposta como JSON
    res.json({ response: responseGroq.choices[0]?.message?.content || "" });
  } catch (error) {
    // Tratamento de erro
    console.error("Erro ao chamar a API da Groq:", error.message);
    return res.status(500).json({ error: "Erro ao consultar a API da Groq." });
  }
});

/**
 * @swagger
 * /api/relatorio-edo:
 *   post:
 *     summary: Gera um relat√≥rio detalhado para um Estudo Dirigido Obrigat√≥rio (EDO)
 *     tags: [Relat√≥rios]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - dados
 *             properties:
 *               dados:
 *                 type: object
 *                 properties:
 *                   nome_aluno:
 *                     type: string
 *                   disciplina:
 *                     type: string
 *                   turma:
 *                     type: string
 *                   serie:
 *                     type: string
 *                   tema_edo:
 *                     type: string
 *                   nota_edo:
 *                     type: number
 *                   data_inicio:
 *                     type: string
 *                   data_termino:
 *                     type: string
 *                   tempo_total_execucao:
 *                     type: string
 *                   tempo_medio_questao:
 *                     type: string
 *                   nivel_maximo_taxonomia:
 *                     type: string
 *                   questoes_erradas:
 *                     type: array
 *                     items:
 *                       type: object
 *                   total_acertos:
 *                     type: integer
 *                   total_erros:
 *                     type: integer
 *                   notas_por_nivel:
 *                     type: object
 *     responses:
 *       200:
 *         description: Relat√≥rio gerado com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 relatorio:
 *                   type: string
 *       400:
 *         description: Dados n√£o fornecidos corretamente
 *       500:
 *         description: Erro ao gerar o relat√≥rio
 */
/**
 * Rota para gera√ß√£o de relat√≥rio EDO (Estudo Dirigido Obrigat√≥rio)
 * Recebe dados do aluno e do EDO e retorna um relat√≥rio detalhado gerado pela IA
 */
app.post("/api/relatorio-edo", async (req, res) => {
  const { dados } = req.body;  // Extrai os dados do corpo da requisi√ß√£o

  // Valida√ß√£o dos dados
  if (!dados || !dados.nome_aluno) {
    return res.status(400).json({ error: "Dados do EDO n√£o fornecidos corretamente!" });
  }

  try {
    // Usa o prompt din√¢mico para relat√≥rios
    const systemPrompt = currentReportPrompt;

    // Prompt do usu√°rio com os dados para gerar o relat√≥rio
    const userPrompt = `
    Gere um relat√≥rio detalhado para os seguintes dados:
    ${JSON.stringify(dados, null, 2)}
    `;

    // Envia os prompts para a API da Groq e aguarda a resposta
    const responseGroq = await getGroqChatCompletion(userPrompt, systemPrompt);
    const relatorio = responseGroq.choices[0]?.message.content || "";

    console.log("Relat√≥rio gerado com sucesso!");

    // Retorna o relat√≥rio gerado como JSON
    res.json({ relatorio });
  } catch (error) {
    // Tratamento de erro
    console.error("Erro ao gerar relat√≥rio:", error.message);
    return res.status(500).json({ error: "Erro ao gerar o relat√≥rio." });
  }
});

/**
 * @swagger
 * /api/relatorio-edo/pdf:
 *   post:
 *     summary: Gera um relat√≥rio detalhado em formato PDF para um Estudo Dirigido Obrigat√≥rio (EDO)
 *     tags: [Relat√≥rios]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - dados
 *             properties:
 *               dados:
 *                 type: object
 *                 properties:
 *                   nome_aluno:
 *                     type: string
 *                   disciplina:
 *                     type: string
 *                   turma:
 *                     type: string
 *                   serie:
 *                     type: string
 *                   tema_edo:
 *                     type: string
 *                   nota_edo:
 *                     type: number
 *                   data_inicio:
 *                     type: string
 *                   data_termino:
 *                     type: string
 *                   tempo_total_execucao:
 *                     type: string
 *                   tempo_medio_questao:
 *                     type: string
 *                   nivel_maximo_taxonomia:
 *                     type: string
 *                   questoes_erradas:
 *                     type: array
 *                     items:
 *                       type: object
 *                   total_acertos:
 *                     type: integer
 *                   total_erros:
 *                     type: integer
 *                   notas_por_nivel:
 *                     type: object
 *     responses:
 *       200:
 *         description: PDF gerado com sucesso
 *         content:
 *           application/pdf:
 *             schema:
 *               type: string
 *               format: binary
 *       400:
 *         description: Dados n√£o fornecidos corretamente
 *       500:
 *         description: Erro ao gerar o relat√≥rio
 */
/**
 * Rota para gera√ß√£o de relat√≥rio EDO em formato PDF
 * Recebe dados do aluno e do EDO, gera um relat√≥rio detalhado e retorna como PDF para download
 */
app.post("/api/relatorio-edo/pdf", async (req, res) => {
  const { dados } = req.body;  // Extrai os dados do corpo da requisi√ß√£o

  // Valida√ß√£o dos dados
  if (!dados || !dados.nome_aluno) {
    return res.status(400).json({ error: "Dados do EDO n√£o fornecidos corretamente!" });
  }

  try {
    // Usa o prompt din√¢mico para relat√≥rios
    const systemPrompt = currentReportPrompt;

    // Prompt do usu√°rio com os dados para gerar o relat√≥rio
    const userPrompt = `
    Gere um relat√≥rio detalhado para os seguintes dados:
    ${JSON.stringify(dados, null, 2)}
    `;

    // Envia os prompts para a API da Groq e aguarda a resposta
    const responseGroq = await getGroqChatCompletion(userPrompt, systemPrompt);
    const relatorio = responseGroq.choices[0]?.message.content || "";

    console.log("Gerando PDF do relat√≥rio...");

    // Configurando o cabe√ßalho para download do PDF
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename=relatorio-${dados.nome_aluno.replace(/\s+/g, '-').toLowerCase()}.pdf`);

    // Criando o documento PDF com metadados
    const doc = new PDFDocument({ 
      size: 'A4',
      margin: 50,
      info: {
        Title: `Relat√≥rio EDO - ${dados.nome_aluno}`,
        Author: 'ToLearn - Plataforma de Ensino',
        Subject: `Relat√≥rio de desempenho em ${dados.disciplina} - ${dados.tema_edo}`
      }
    });

    // Pipe do PDF para a resposta HTTP
    doc.pipe(res);

    // Adicionando logo (simulada com um ret√¢ngulo colorido)
    doc.rect(50, 50, 100, 40)
       .fillColor('#4CAF50')
       .fill();
    
    doc.fillColor('#000')
       .fontSize(16)
       .text('ToLearn', 60, 65);

    // Cabe√ßalho do relat√≥rio
    doc.moveDown(2)
       .fontSize(22)
       .font('Helvetica-Bold')
       .text('Relat√≥rio Detalhado de Desempenho', { align: 'center' });
    
    doc.moveDown(0.5)
       .fontSize(16)
       .text(`Aluno: ${dados.nome_aluno}`, { align: 'center' });
    
    // Informa√ß√µes do EDO
    doc.moveDown(1.5)
       .fontSize(14)
       .font('Helvetica-Bold')
       .text('Informa√ß√µes do EDO');
    
    doc.moveDown(0.5)
       .fontSize(12)
       .font('Helvetica')
       .text(`Disciplina: ${dados.disciplina}`)
       .text(`Turma: ${dados.turma}`)
       .text(`Tema: ${dados.tema_edo}`)
       .text(`Nota: ${dados.nota_edo}`)
       .text(`Data de in√≠cio: ${dados.data_inicio}`)
       .text(`Data de t√©rmino: ${dados.data_termino}`)
       .text(`Tempo total: ${dados.tempo_total_execucao}`)
       .text(`N√≠vel m√°ximo alcan√ßado: ${dados.nivel_maximo_taxonomia}`);

    // Divisor
    doc.moveDown(1)
       .strokeColor('#aaaaaa')
       .lineWidth(1)
       .moveTo(50, doc.y)
       .lineTo(550, doc.y)
       .stroke();

    // Conte√∫do do relat√≥rio
    doc.moveDown(1)
       .fontSize(12)
       .font('Helvetica');

    // Processando o relat√≥rio linha por linha para formata√ß√£o adequada
    const linhas = relatorio.split('\n');
    let emTitulo = false;

    for (let linha of linhas) {
      // Se for um t√≠tulo (1., 2., etc. ou come√ßar com emoji)
      if (linha.match(/^\d+\.\s/) || linha.match(/^üß†/) || linha.match(/^‚úÖ/) || linha.match(/^‚ùå/) || linha.match(/^üß≠/) || linha.match(/^‚úÖ/)) {
        emTitulo = true;
        doc.moveDown(0.5)
           .font('Helvetica-Bold')
           .fontSize(14)
           .text(linha);
      } else if (linha.trim() === '') {
        doc.moveDown(0.5);
      } else {
        if (emTitulo) {
          emTitulo = false;
          doc.moveDown(0.5);
        }
        doc.font('Helvetica')
           .fontSize(12)
           .text(linha, {
             align: 'justify',
             lineGap: 2
           });
      }
    }

    // Rodap√© na p√°gina atual
    // Linha divis√≥ria no rodap√©
    doc.strokeColor('#aaaaaa')
       .lineWidth(1)
       .moveTo(50, 750)
       .lineTo(550, 750)
       .stroke();
    
    // Texto do rodap√©
    doc.fontSize(10)
       .fillColor('#555555')
       .text(
         `Relat√≥rio gerado automaticamente por ToLearn IA | ${new Date().toLocaleDateString('pt-BR')}`,
         50,
         760,
         { align: 'center' }
       );
    
    // N√∫mero da p√°gina - vamos apenas adicionar na p√°gina atual
    doc.text(
      `P√°gina 1`,
      50,
      760,
      { align: 'right' }
    );

    // Finalizando o PDF
    doc.end();
    console.log("PDF gerado com sucesso!");
    
  } catch (error) {
    // Tratamento de erro
    console.error("Erro ao gerar relat√≥rio em PDF:", error.message);
    return res.status(500).json({ error: "Erro ao gerar o relat√≥rio em PDF." });
  }
});

/**
 * Inicia o servidor na porta especificada
 */
app.listen(PORT, () => {
  console.log(`Servidor rodando na porta ${PORT}`);
  console.log(`Documenta√ß√£o Swagger dispon√≠vel em: http://localhost:${PORT}/api-docs`);
});
